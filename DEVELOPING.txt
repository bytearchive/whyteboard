Whyteboard - Help for development

You'll probably need some knowledge of Python + the wxPython GUI toolkit, as
Whyteboard is developed with these, using some advanced-ish concepts.

The main class is GUI in gui.py. It consists of a wx.Frame - a "window" to the
general end-user, containg the title and close/minimise button etc. It has
references to its contained panels - the control panel on the left, menu bar,
tool bar, the canvas itself and the panel on the right.

The gui contains the global event bindings, e.g. undo/redo, copy/paste. It
dispatches function calls to relevant classes, for example undo will tell the
current tab to undo its last operation, Or, saving a file will involve prompting
the user for the location to save the file to, and then call a function in the
utility class to actually save the data.

Since the program is tabbed, the gui keeps a reference to its active "board".
The gui updates its board reference when opening/closing/changing tabs. Often we
want to perform operations only on the current tab, e.g. paste an image into a
tab, export the current tab as an image and so on. Thus knowing the current tab
is useful.

The canvas is the Whyteboard class, defined in whyteboard.py. It is a basic
window without a title bar, and has its own event bindings. So, when a user is
drawing by clicking on the canvas, the Whyteboard (gui.board) is calling its own
events. Mutiple Whyteboard canvases will exists at a given time, and the GUI
presents these views to the user through its tab list, thumbnails panel and the
Notes tree.

The Whyteboard class contains a list of shapes that has been drawn upon it. Each
instance of this class will have its own unique shapes list. This is how each
Whyteboard tab can perform its own undo and redo without affecting any other
Whyteboard instances.

Tools.py defines the shapes - different drawable tools that the program uses.
At the bottom of the file is a list named "items" -- this is the list of tools
the user can draw with. From this, buttons, icons, translated names, hotkeys
are generated. There are a few interesting methods each shape provides:
 - name - translated name
 - hotkey - keyboard shortcut key
 - left_up() - called when drawing - left button pressed
 - left_down() - left button up
 - double_click() - double clicked
 - right_up() - right button up
 - motion() - mouse motion while left mouse button is held down
 - hit_test() - a check if an x/y point is "inside" the shape
 - load() - called when loading the shape
 - save() - when saving
 - properties() - a text description of the shapes' properties, e.g. x/y coords
 - preview() - tool preview drawn in the left panel

These allow you to customise your tools easily. There is an object hierarchy, as
so:

                     Tool
                      |
      ---------------------------------------------
      |               |              |            |
      Eyedrop   OverlayShape      Select        Media
                      |
  -------------------------------------------------------------------------
  |         |          |                                |        |        |
 Image   Rectangle   Circle                          Polygon    Text    Line
            |                                           |        |        |
       --------------------------------------          Pen      Note    Arrow
       |               |                    |           |
    BitmapSelect     RoundedRectangle    Ellipse    ----------
                                                    |        |
                                                 Eraser   Highlighter


Many of the classes at the bottom of the list simply extend the base classes'
behaviour - nested deeply in the hierarchy, they have many inherited methods.
Most of these classes invoke their superclasses' methods. For example, draw() in
OverlayShape will draw the shape overlayed on the canvas, meaning it is not
permenantly drawn on the canvas as the user moves their mouse around. Note needs
to extend this behaviour by also drawing a background to the shape -- so first
calls draw() on its superclass, Text, which will draw the text, and invokes
draw() on OverlayShape.


The source files are organised as follows:

lib/ - third party modules
fakewidgets - mock GUI classes for unit testing
meta.py - meta data for the program, meant to be dependent on wxPython only
functions.py - stand-alone functions that can be used anywhere

utility.py - a utility class that the GUI keeps a reference to. Has functions
for saving/loading files, getting file paths and misc. things

dialogs.py - dialogs and their events, e.g. Progresss dialog / resize / history
panels.py -  control, notes, thumnbails.
